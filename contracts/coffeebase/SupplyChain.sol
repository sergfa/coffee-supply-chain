// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is
    Ownable,
    FarmerRole,
    DistributorRole,
    RetailerRole,
    ConsumerRole
{
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 internal _sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint256 => Item) internal _items;

    // Define enum 'State' with the following values:
    enum State {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased // 7
    }

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint256 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint256 upc);
    event Processed(uint256 upc);
    event Packed(uint256 upc);
    event ForSale(uint256 upc);
    event Sold(uint256 upc);
    event Shipped(uint256 upc);
    event Received(uint256 upc);
    event Purchased(uint256 upc);

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address, "Invalid sender address");
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price, "Not enough ether");
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 upc_) {
        _;
        uint256 price = _items[upc_].productPrice;
        if (msg.value > price) {
            uint256 amountToReturn = msg.value - price;
            _convertToPayable(_items[upc_].consumerID).transfer(amountToReturn);
        }
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint256 upc_) {
        require(_validateState(upc_, State.Harvested));
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint256 upc_) {
        require(_validateState(upc_, State.Processed));
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint256 upc_) {
        require(_validateState(upc_, State.Packed));
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint256 upc_) {
        require(_validateState(upc_, State.ForSale));
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint256 upc_) {
        require(_validateState(upc_, State.Sold));
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint256 upc_) {
        require(_validateState(upc_, State.Shipped));
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint256 upc_) {
        require(_validateState(upc_, State.Received));
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint256 upc_) {
        require(_validateState(upc_, State.Purchased));
        _;
    }

    modifier itemExist(uint256 upc_) {
        require(
            _items[upc_].sku != 0,
            "Coffee Supply Chain: Item doesn't exist"
        );
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    constructor()
        payable
        Ownable()
        FarmerRole()
        DistributorRole()
        RetailerRole()
        ConsumerRole()
    {
        _sku = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == owner()) {
            selfdestruct(_convertToPayable(owner()));
        }
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint256 upc_,
        address originFarmerID_,
        string memory originFarmName_,
        string memory originFarmInformation_,
        string memory originFarmLatitude_,
        string memory originFarmLongitude_,
        string memory productNotes_
    ) public onlyFarmer {
        require(
            _items[upc_].sku == 0,
            "Coffee Supply Chain: Item already exists"
        );
        Item memory item;
        item.sku = _sku;
        item.upc = upc_;
        item.originFarmerID = originFarmerID_;
        item.originFarmName = originFarmName_;
        item.originFarmInformation = originFarmInformation_;
        item.originFarmLatitude = originFarmLatitude_;
        item.originFarmLongitude = originFarmLongitude_;
        item.productNotes = productNotes_;
        item.itemState = State.Harvested;
        item.ownerID = originFarmerID_;
        // Add the new item as part of Harvest
        _items[upc_] = item;
        // Increment sku
        _sku += 1;
        // Emit the appropriate event
        emit Harvested(upc_);
    }

    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    function processItem(uint256 upc_)
        public
        onlyFarmer
        itemExist(upc_)
        verifyCaller(_items[upc_].ownerID)
        harvested(upc_)
    {
        Item storage item = _items[upc_];
        item.itemState = State.Processed;
        emit Processed(upc_);
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint256 upc_)
        public
        onlyFarmer
        itemExist(upc_)
        verifyCaller(_items[upc_].ownerID)
        processed(upc_)
    {
        Item storage item = _items[upc_];
        item.itemState = State.Packed;
        emit Packed(upc_);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint256 upc_, uint256 price_)
        public
        onlyFarmer
        itemExist(upc_)
        verifyCaller(_items[upc_].ownerID)
        packed(upc_)
    {
        Item storage item = _items[upc_];
        item.itemState = State.ForSale;
        item.productPrice = price_;
        emit ForSale(upc_);
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint256 upc_)
        public
        payable
        onlyDistributor
        itemExist(upc_)
        forSale(upc_)
        paidEnough(_items[upc_].productPrice)
        checkValue(upc_)
    {
        Item storage item = _items[upc_];
        item.itemState = State.Sold;
        item.distributorID = msg.sender;
        address payable productOwner = _convertToPayable(item.ownerID);
        productOwner.transfer(item.productPrice);
        item.ownerID = msg.sender;
        emit Sold(upc_);
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItem(uint256 upc_)
        public
        onlyDistributor
        itemExist(upc_)
        verifyCaller(_items[upc_].ownerID)
        sold(upc_)
    {
        Item storage item = _items[upc_];
        item.itemState = State.Shipped;
        emit Shipped(upc_);
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint256 upc_)
        public
        onlyRetailer
        itemExist(upc_)
        shipped(upc_)
    {
        Item storage item = _items[upc_];
        item.itemState = State.Received;
        item.retailerID = msg.sender;
        item.ownerID = msg.sender;
        emit Received(upc_);
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint256 upc_)
        public
        onlyConsumer
        itemExist(upc_)
        received(upc_)
    {
        Item storage item = _items[upc_];
        item.itemState = State.Purchased;
        item.consumerID = msg.sender;
        item.ownerID = msg.sender;
        emit Purchased(upc_);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint256 upc_)
        public
        view
        itemExist(upc_)
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            address ownerID,
            address originFarmerID,
            string memory originFarmName,
            string memory originFarmInformation,
            string memory originFarmLatitude,
            string memory originFarmLongitude
        )
    {
        Item memory item = _items[upc_];

        return (
            item.sku,
            item.upc,
            item.ownerID,
            item.originFarmerID,
            item.originFarmName,
            item.originFarmInformation,
            item.originFarmLatitude,
            item.originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint256 upc_)
        public
        view
        itemExist(upc_)
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            uint256 productID,
            string memory productNotes,
            uint256 productPrice,
            uint256 itemState,
            address distributorID,
            address retailerID,
            address consumerID
        )
    {
        Item memory item = _items[upc_];
        // Assign values to the 9 parameters

        return (
            item.sku,
            item.upc,
            item.productID,
            item.productNotes,
            item.productPrice,
            uint256(item.itemState),
            item.distributorID,
            item.retailerID,
            item.consumerID
        );
    }

    function _validateState(uint256 upc_, State state_)
        private
        view
        returns (bool)
    {
        return _items[upc_].itemState == state_;
    }

    function _convertToPayable(address addressItem)
        private
        pure
        returns (address payable)
    {
        address payable payableAddress = payable(addressItem);
        return payableAddress;
    }
}
