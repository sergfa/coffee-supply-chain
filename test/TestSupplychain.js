// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const originFarmerID = accounts[1];
    const originFarmName = "John Doe";
    const originFarmInformation = "Yarray Valley";
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    const productNotes = "Best beans for Espresso";
    const productPrice = web3.utils.toWei("0.01", "ether");
    const distributorID = accounts[2];
    const retailerID = accounts[3];
    const consumerID = accounts[4];
    const accountWithoutRole = accounts[5];
    let supplyChain;
    let initRoles = false;
    
    beforeEach(async () => {
        supplyChain = await SupplyChain.deployed();
        if (!initRoles) {
            initRoles = true;
            await supplyChain.addFarmer(originFarmerID);
            await supplyChain.addDistributor(distributorID)
            await supplyChain.addRetailer(retailerID)
            await supplyChain.addConsumer(consumerID)        
        }
       
    });

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        
        // Mark an item as Harvested by calling function harvestItem()
        const tx = await supplyChain.harvestItem(
            upc, 
            originFarmerID, 
            originFarmName, 
            originFarmInformation, 
            originFarmLatitude, 
            originFarmLongitude, 
            productNotes,
        );

        let eventEmitted = false;

        truffleAssert.eventEmitted(tx, 'Harvested', (eventData) => {
            eventEmitted = eventData.upc == upc; 
            return eventEmitted;
        });
       
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        //given
        let eventEmitted = false;
        // when
        const tx = await supplyChain.processItem(upc, {from: originFarmerID});
        truffleAssert.eventEmitted(tx, 'Processed', (eventData) => {
            eventEmitted = eventData.upc == upc; 
            return eventEmitted;
        });
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        // then
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');
    });    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {       
        //given
        let eventEmitted = false;
        // when
        const tx = await supplyChain.packItem(upc, {from: originFarmerID});
        truffleAssert.eventEmitted(tx, 'Packed', (eventData) => {
            eventEmitted = eventData.upc == upc; 
            return eventEmitted;
        });
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        // then
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State');     
    });    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {       
      //given
      let eventEmitted = false;
      // when
      const tx = await supplyChain.sellItem(upc, productPrice, {from: originFarmerID});
      truffleAssert.eventEmitted(tx, 'ForSale', (eventData) => {
          eventEmitted = eventData.upc == upc; 
          return eventEmitted;
      });
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
      // then
      assert.equal(eventEmitted, true, 'Invalid event emitted');
      assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');     
      assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid product price');         
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        
               
        //given
        let eventEmitted = false;
        const value = web3.utils.toWei("0.01", "ether");
        const farmerBalanceBeforeBuy = Number(await web3.eth.getBalance(originFarmerID));
        // when
        const tx = await supplyChain.buyItem(upc, {from: distributorID, value });
        truffleAssert.eventEmitted(tx, 'Sold', (eventData) => {
            eventEmitted = eventData.upc == upc; 
            return eventEmitted;
        });
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const farmerBalanceAfterBuy = Number(await web3.eth.getBalance(originFarmerID));
        const expectedFarmerBalance = farmerBalanceBeforeBuy + Number(productPrice);
            
        // then
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
        assert.equal(resultBufferOne[2], distributorID, 'Error: Invalid owner address');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributor address');
        assert.equal(farmerBalanceAfterBuy, expectedFarmerBalance, "Invalid farmer balance after buy");
    });

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {        
        //given
        let eventEmitted = false;
        // when
        const tx = await supplyChain.shipItem(upc, {from: distributorID});
        truffleAssert.eventEmitted(tx, 'Shipped', (eventData) => {
            eventEmitted = eventData.upc == upc; 
            return eventEmitted;
        });
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        // then
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');     
    });

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        //given
        let eventEmitted = false;
        // when
        const tx = await supplyChain.receiveItem(upc, {from: retailerID});
        truffleAssert.eventEmitted(tx, 'Received', (eventData) => {
            eventEmitted = eventData.upc == upc; 
            return eventEmitted;
        });
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        // then
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferOne[2], retailerID, 'Error: Invalid owner address');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailer address');
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');     
    });    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {        
        //given
        let eventEmitted = false;
        // when
        const tx = await supplyChain.purchaseItem(upc, {from: consumerID});
        truffleAssert.eventEmitted(tx, 'Purchased', (eventData) => {
            eventEmitted = eventData.upc == upc; 
            return eventEmitted;
        });
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        // then
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid owner address');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid retailer address');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');     
        
    });   

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, {from: accountWithoutRole}); 
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')  
    });

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const resultBufferOne = await supplyChain.fetchItemBufferTwo.call(upc, {from: accountWithoutRole}); 
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')  
    });

});
